/**
 * @fileoverview A class to manage state of generating a code path.
 * @author Toru Nagashima
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const CodePathSegment = require("./code-path-segment"),
    ForkContext = require("./fork-context");

//-----------------------------------------------------------------------------
// Contexts
//-----------------------------------------------------------------------------

/**
 * Represents the context in which a `break` statement can be used.
 *
 * A `break` statement without a label is only valid in a few places in
 * JavaScript: any type of loop or a `switch` statement. Otherwise, `break`
 * without a label causes a syntax error. For these contexts, `breakable` is
 * set to `true` to indicate that a `break` without a label is valid.
 *
 * However, a `break` statement with a label is also valid inside of a labeled
 * statement. For example, this is valid:
 *
 *     a : {
 *         break a;
 *     }
 *
 * The `breakable` property is set false for labeled statements to indicate
 * that `break` without a label is invalid.
 */
class BreakContext {

    /**
     * Creates a new instance.
     * @param {BreakContext} upperContext The previous `BreakContext`.
     * @param {boolean} breakable Indicates if we are inside a statement where
     *      `break` without a label will exit the statement.
     * @param {string|null} label The label for the statement.
     * @param {ForkContext} forkContext The current fork context.
     */
    constructor(upperContext, breakable, label, forkContext) {

        /**
         * The previous `BreakContext`
         * @type {BreakContext}
         */
        this.upper = upperContext;

        /**
         * Indicates if we are inside a statement where `break` without a label
         * will exit the statement.
         * @type {boolean}
         */
        this.breakable = breakable;

        /**
         * The label associated with the statement.
         * @type {string|null}
         */
        this.label = label;

        /**
         * The fork context for the `break`.
         * @type {ForkContext}
         */
        this.brokenForkContext = ForkContext.newEmpty(forkContext);
    }
}

/**
 * Represents the context for `ChainExpression` nodes.
 */
class ChainContext {

    /**
     * Creates a new instance.
     * @param {ChainContext} upperContext The previous `